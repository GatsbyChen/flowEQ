classdef Decoder
% DECODER Construct a simple decoder network for prediction.
%
%   This class loads model weights from the supplied .mat file and
%   constructs a simple neural network (the decoder of a variational
%   autoencoder) including relevant activation functions. Run the
%   predict function to sample from the latent space and generate new
%   EQ parameter values. The decoder generates normalized parameters
%   (between 0 and 1), which must first be denormalized before being
%   passed to the coefficient generation functions.

    properties
        W1, b1, W2, b2; % model weights
        xmax, xmin;     % normalization values
    end
    
    methods
        function obj = Decoder(filename)
            % The class constructor takes as input a string that points to
            % a .mat file that has been generated by ConvertModels.
            % coder.load is used to load the weights and then store them
            % into properties of the class to be used for prediction.
            %
            % ex: nnet2d = Decoder('assets/decoder2d.mat')
            
            % parameter vectors for norm/denormalization
            obj.xmax = [ 12.0 1000.0  12.0 3900.0 10.0  12.0 4700.0 10.0  12.0 10000.0 10.0  12.0 20000.0];
            obj.xmin = [-12.0   22.0 -12.0   82.0  0.1 -12.0  180.0  0.1 -12.0   220.0  0.1 -12.0   580.0];

            % load trained model weights from .mat file
            weights = coder.load(filename);
            obj.W1 = weights.W1;
            obj.b1 = weights.b1;
            obj.W2 = weights.W2;
            obj.b2 = weights.b2;
        end
        
        function y_hat = predict(obj, z)
            % Takes a latent vector z with the appropriate dimensionality
            % and performs a forward pass throught the network. The output
            % is a 13x1 vector of normalized (0 to 1) equalizer parameters.
            
            z1 = (z * obj.W1) + obj.b1;
            a1 = obj.ReLU(z1);
            z2 = (a1 * obj.W2) + obj.b2;
            a2 = obj.sigmoid(z2);
            y_hat = a2;
        end
        
        function x_a = ReLU(~, x)
            % Rectified Linear Unit activation function
            x_a = max(x, 0);
        end
        
        function x_a = sigmoid(~, x)
            % Sigmoid activation function
            x_a = 1 ./ (1 + exp(-x));
        end
        
        function xNorm = normalize(obj, x)
            % Take nominal EQ parameters and normalize them between 0 and 1
            xNorm = (x - obj.xmin) ./ (obj.xmax - obj.xmin);
        end
        
        function xDenorm = denormalize(obj, x)
            % Take normalized EQ parameters and denormalize them
            xDenorm = (x .* (obj.xmax - obj.xmin)) + obj.xmin;
        end
   end
end
    